// Волновойалгоритм.cpp: определяет точку входа для консольного приложения.

#include <stdio.h>
#include <tchar.h>
#include <iostream>
#include <iomanip>

using namespace std;

const int M = 22;

/*
111- непроходимая
110-проходимая
100-конечная
0-начальная
*/
void print_map(int mas[M][M])
{
	cout << endl;
	for (int i = 1; i<M - 1; i++)
	{
		for (int j = 1; j<M - 1; j++)
		{
			switch (mas[i][j])
			{
			case 111:
			{
				cout << setw(3) << "#";
				break;
			}
			case 110:
			{
				cout << setw(3) << ".";
				break;
			}
			case 100:
			{
				cout << setw(3) << "A";
				break;
			}
			case 0:
			{
				cout << setw(3) << "B";
				break;
			}
			case -1:
			{
				cout << setw(3) << ">";
				break;
			}



			}

		}
		cout << endl;
	}
}

int main()
{
	int MAP[M][M] = {
		111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,
		111,110,111,111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,111,110,111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,111,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,111,111,111,111,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,111,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,111,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,
		111,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,110,111,
		111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,
	};
	int X3, Y3, X4, Y4;
	setlocale(LC_CTYPE, "rus");
	cout << "Введите X точки A:";
	cin >> X3;
	cout << "Введите Y точки A:";
	cin >> Y3;
	MAP[X3 + 1][Y3 + 1] = 100;

	cout << "Введите X точки B:";
	cin >> X4;
	cout << "Введите Y точки B:";
	cin >> Y4;
	MAP[X4 + 1][Y4 + 1] = 0;

	print_map(MAP);
	int RAB[M][M];
	for (int i = 0; i<M; i++)
		for (int j = 0; j<M; j++)RAB[i][j] = MAP[i][j];



	int iter(0), iterk(100);
	while (iter<iterk)
	{
		for (int i = 0; i<M; i++)
		{
			for (int j = 0; j<M; j++)
			{

				if (RAB[i][j] == iter)
				{

					if (RAB[i + 1][j] == 110)RAB[i + 1][j] = iter + 1;
					if (RAB[i - 1][j] == 110)RAB[i - 1][j] = iter + 1;
					if (RAB[i][j + 1] == 110)RAB[i][j + 1] = iter + 1;
					if (RAB[i][j - 1] == 110)RAB[i][j - 1] = iter + 1;

					if (RAB[i + 1][j] == 0)break;
					if (RAB[i - 1][j] == 0)break;
					if (RAB[i][j + 1] == 0)break;
					if (RAB[i][j - 1] == 0)break;

				}
			}
		}
		iter++;
	}

	if ((RAB[X4 + 1 + 1][Y4 + 1] == 111 || RAB[X4 + 1 + 1][Y4 + 1] == 110) && (RAB[X4 - 1 + 1][Y4 + 1] == 110 || RAB[X4 - 1 + 1][Y4 + 1] == 111) && (RAB[X4 + 1][Y4] == 110 || RAB[X4 + 1][Y4] == 111) && (RAB[X4 + 1][Y4 + 2] == 111 || RAB[X4 + 1][Y4 + 2] == 110))return 0;
	if ((RAB[X3 + 1 + 1][Y3 + 1] == 111 || RAB[X3 + 1 + 1][Y3 + 1] == 110) && (RAB[X3 - 1 + 1][Y3 + 1] == 110 || RAB[X3 - 1 + 1][Y3 + 1] == 111) && (RAB[X3 + 1][Y3] == 110 || RAB[X3 + 1][Y3] == 111) && (RAB[X3 + 1][Y3 + 2] == 111 || RAB[X3 + 1][Y3 + 2] == 110))return 0;

	cout << endl;
	for (int i = 1; i<M - 1; i++)
	{
		for (int j = 1; j<M - 1; j++)
		{

			cout << setw(3) << RAB[i][j];

		}
		cout << endl;
	}
	int X = X3 + 1, Y = Y3 + 1, X1(0), Y1(0);

	int min(111);

	while (1) {

		if (RAB[X + 1][Y]<min)

		{
			min = RAB[X + 1][Y];

			X1 = X + 1;

			Y1 = Y;

		}

		if (RAB[X - 1][Y]<min)

		{
			min = RAB[X - 1][Y];

			X1 = X - 1;

			Y1 = Y;

		}

		if (RAB[X][Y + 1]<min) {
			min = RAB[X][Y + 1];

			X1 = X;

			Y1 = Y + 1;

		}

		if (RAB[X][Y - 1]<min) {
			min = RAB[X][Y - 1];

			X1 = X;

			Y1 = Y - 1;

		}

		X = X1;

		Y = Y1;

		if (RAB[X1][Y1] == 0)break;

		MAP[X1][Y1] = -1;

	}

	print_map(MAP);
	return 0;
}